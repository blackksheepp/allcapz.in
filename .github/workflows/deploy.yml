name: Build and Deploy

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
  HOST: ${{ secrets.HOST }}
  REPO: ${{ secrets.REPO }}

jobs:
  build:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ./Dockerfile
          platforms: linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO }}:arm64

  deploy:
    needs: build
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set permissions for private key
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Write .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "REDIS_URI=${{ secrets.REDIS_URI }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "AUTH_URL=${{ secrets.AUTH_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "RAZORPAY_ID=${{ secrets.RAZORPAY_ID }}" >> .env
          echo "RAZORPAY_KEY=${{ secrets.RAZORPAY_KEY }}" >> .env
          echo "SHIPROCKET_EMAIL=${{ secrets.SHIPROCKET_EMAIL }}" >> .env
          echo "SHIPROCKET_PASSWORD=${{ secrets.SHIPROCKET_PASSWORD }}" >> .env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHANNEL=${{ secrets.TELEGRAM_CHANNEL }}" >> .env
          echo "STORAGE_API_KEY=${{ secrets.STORAGE_API_KEY }}" >> .env
          echo "BACKUP_CHANNEL=${{ secrets.BACKUP_CHANNEL }}" >> .env
          echo "MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}" >> .env
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env

      - name: SCP .env file to server
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem .env ${{ secrets.HOST }}:~

      - name: Write backup.sh 
        run: |
          cat <<EOR > backup.sh
          #!/bin/bash

          if [ -f /usr/local/bin/.env ]; then
            source /usr/local/bin/.env
          else
            echo "Environment file not found!"
            exit 1
          fi

          BACKUP_DIR="/backup/mongodb"
          TIMESTAMP=\$(date +"%Y-%m-%d_%H-%M-%S")
          BACKUP_NAME="mongo_backup_\${TIMESTAMP}"

          mkdir -p "\$BACKUP_DIR"

          mongodump --host mongodb -u "\$MONGO_INITDB_ROOT_USERNAME" -p "\$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --out "\$BACKUP_DIR/\$BACKUP_NAME"

          tar -czf "\$BACKUP_DIR/\$BACKUP_NAME.tar.gz" -C "\$BACKUP_DIR" "\$BACKUP_NAME"

          curl -F "chat_id=\${CHAT_ID}" -F document=@"\$BACKUP_DIR/\$BACKUP_NAME.tar.gz" "https://api.telegram.org/bot\${TELEGRAM_TOKEN}/sendDocument"

          echo "MongoDB backup sent to Telegram."
          EOR

      - name: SCP backup.sh file to server
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.HOST }} 'mkdir -p ~/backup'
          scp -o StrictHostKeyChecking=no -i key.pem backup.sh ${{ secrets.HOST }}:~/backup/

      - name: Write backup.Dockerfile 
        run: |
          cat <<EOR > backup.Dockerfile
          FROM alpine:3.17

          RUN apk add --no-cache \\
              curl \\
              bash \\
              mongodb-tools

          COPY backup/backup.sh /usr/local/bin/backup.sh

          RUN chmod +x /usr/local/bin/backup.sh

          CMD ["/usr/local/bin/backup.sh"]
          EOR

      - name: SCP backup.Dockerfile file to server
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem backup.Dockerfile ${{ secrets.HOST }}:~


      - name: Write docker-compose.yml
        run: |
          cat <<EOF > docker-compose.yml
          services:
            mongodb:
              image: mongo:latest
              container_name: mongodb
              restart: always
              environment:
                MONGO_INITDB_ROOT_USERNAME: \${MONGO_USERNAME}
                MONGO_INITDB_ROOT_PASSWORD: \${MONGO_PASSWORD}
              ports:
                - "127.0.0.1:27017:27017"  # expose only to local interface
              volumes:
                - mongodb_data:/data/db

            backup:
              build:
                context: .
                dockerfile: backup.Dockerfile
              container_name: mongo_backup
              volumes:
                - ~/backup/:/usr/local/bin
                - ~/.env:/usr/local/bin/.env
              environment:
                - TELEGRAM_TOKEN=\${TELEGRAM_BOT_TOKEN}
                - CHAT_ID=\${BACKUP_CHANNEL}
                - MONGO_INITDB_ROOT_USERNAME=\${MONGO_USERNAME}
                - MONGO_INITDB_ROOT_PASSWORD=\${MONGO_PASSWORD}
              entrypoint: ["bash", "/usr/local/bin/backup.sh"]
              restart: no

            app:
              image: randompickle/allcapz.in:arm64
              container_name: allcapz
              env_file:
                - .env
              ports:
                - "127.0.0.1:8000:8000"  # expose it only local interface
              restart: unless-stopped  # keep it
              depends_on:
                - mongodb  # ensures MongoDB starts before the app

          volumes:
            mongodb_data:
              driver: local
          EOF

      - name: SCP docker-compose.yml to server
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml ${{ secrets.HOST }}:~

      - name: Restart or Start Containers with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.HOST }} << 'EOF'
            cd ~
            docker compose down || true
            docker compose up -d --build
          EOF
