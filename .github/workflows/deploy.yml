name: Build on DockerHub and Deploy

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
  HOST: ${{ secrets.HOST }}
  REPO: ${{ secrets.REPO }}

jobs:
  build:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ./Dockerfile
          platforms: linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO }}:arm64

  deploy:
    needs: build
    environment: production
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      REDIS_URI: ${{ secrets.REDIS_URI }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      AUTH_URL: ${{ secrets.AUTH_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      RAZORPAY_ID: ${{ secrets.RAZORPAY_ID }}
      RAZORPAY_KEY: ${{ secrets.RAZORPAY_KEY }}
      SHIPROCKET_EMAIL: ${{ secrets.SHIPROCKET_EMAIL }}
      SHIPROCKET_PASSWORD: ${{ secrets.SHIPROCKET_PASSWORD }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set permissions for private key
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Write .env file dynamically
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "REDIS_URI=${{ secrets.REDIS_URI }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "AUTH_URL=${{ secrets.AUTH_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "RAZORPAY_ID=${{ secrets.RAZORPAY_ID }}" >> .env
          echo "RAZORPAY_KEY=${{ secrets.RAZORPAY_KEY }}" >> .env
          echo "SHIPROCKET_EMAIL=${{ secrets.SHIPROCKET_EMAIL }}" >> .env
          echo "SHIPROCKET_PASSWORD=${{ secrets.SHIPROCKET_PASSWORD }}" >> .env
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHANNEL=${{ secrets.TELEGRAM_CHANNEL }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env

      - name: SCP .env file to server
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem .env ${{ secrets.HOST }}:~

      - name: Write docker-compose.yml dynamically
        run: |
          cat <<EOF > docker-compose.yml
          services:
            app:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO }}:arm64
              env_file:
                - .env
              expose:
                - "8000:8000"
          EOF

      - name: SCP docker-compose.yml to server
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem docker-compose.yml ${{ secrets.HOST }}:~

      - name: Restart or Start Containers with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.HOST }} << 'EOF'
            cd ~
            docker compose down || true
            docker compose up -d --build
          EOF
